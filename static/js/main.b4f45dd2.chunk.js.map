{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MasonryHeader","props","react_default","a","createElement","className","src","alt","MasonryItem","href","target","rel","MasonryFooter","App","App_MasonryHeader","title","sub","map","it","i","App_MasonryItem","key","App_MasonryFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8MAGMA,cAAgB,SAAAC,GAAK,OACzBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,oBAAoBC,IAAI,qBAG/BC,EAAc,SAAAP,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,KAAGK,KAAMR,EAAMK,IAAKI,OAAO,SAASC,IAAI,uBACtCT,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMK,IAAKC,IAAI,uBAQ/BK,EAAgB,SAAAX,GAAK,OACzBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,KAAGK,KAAK,mBAAmBC,OAAO,SAASC,IAAI,yCAA/C,YADF,mBAGET,EAAAC,EAAAC,cAAA,KAAGK,KAAK,sBAAR,cAmCSI,EA9BH,WAiBV,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACU,EAAD,CAAeC,MAAM,WAAWC,IAAI,UACpCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WApBP,CACZ,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,mBASaY,IAAI,SAACC,EAAIC,GAAL,OAAWjB,EAAAC,EAAAC,cAACgB,EAAD,CAAaC,IAAKF,EAAGb,IAAKY,QAGpDhB,EAAAC,EAAAC,cAACkB,EAAD,QC7CcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b4f45dd2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst MasonryHeader = props =>\n  <div className=\"masonry-header\">\n    <img src=\"images/shlogo.png\" alt=\"SHIHOSHI Logo\" />\n  </div>;\n\nconst MasonryItem = props => {\n  return (\n    <div className=\"masonry-item\">\n      <div className=\"masonry-content\">\n        <div className=\"masonry-img\">\n          <a href={props.src} target=\"_blank\" rel=\"noopener noreferrer\">\n            <img src={props.src} alt=\"SHIHOSHI Snap\" />\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst MasonryFooter = props =>\n  <div className=\"masonry-footer\">\n    <p>\n      <a href=\"www.shihoshi.com\" target=\"_blank\" rel=\"external noopener noreferrer nofollow\">SHIHOSHI</a>\n      &nbsp;(C) 2019&nbsp;\n      <a href=\"admin@shihoshi.com\">contact</a>\n    </p>\n  </div>;\n\n// ES2018 property spread notation {...props}\nconst App = () => {\n  const Items = [\n    \"images/sh01.jpg\",\n    \"images/sh02.jpg\",\n    \"images/sh03.jpg\",\n    \"images/sh04.jpg\",\n    \"images/sh05.jpg\",\n    \"images/sh06.jpg\",\n    \"images/sh07.jpg\",\n    \"images/sh08.jpg\",\n    \"images/sh09.jpg\",\n    \"images/sh10.jpg\",\n    \"images/sh11.jpg\",\n    \"images/sh12.jpg\",\n  ];\n  //console.log(id, \"items\");\n\n  return (\n    <div className=\"App\">\n      <MasonryHeader title=\"SHIHOSHI\" sub=\"Style\" />\n      <div className=\"masonry-wrapper\">\n        <div className=\"masonry\">\n          {Items.map((it, i) => <MasonryItem key={i} src={it} />)}\n        </div>\n      </div>\n      <MasonryFooter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}